/**
 * @fileoverview Firestore Security Rules for NewsFlash application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user data and preferences,
 * while allowing public read access to news articles and categories.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user data, accessible only to the owning user.
 * - /news_articles/{newsArticleId}: Stores news articles, publicly readable, write access TBD (admin).
 * - /categories/{categoryId}: Stores news categories, publicly readable, write access TBD (admin).
 * - /user_preferences/{userPreferenceId}: Stores user preferences, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Public read access to news articles and categories is allowed.
 * - User listing is implicitly disallowed by the absence of a top-level `list` rule on `/users`.
 * - Write access to news articles and categories is not yet defined (TODO: admin roles).
 * - Strict ownership is enforced for user documents and user preferences.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own document (auth.uid == userId).
     * @allow (get, update, delete) - If the user is the owner of the document.
     * @deny (create) - If the user is trying to create a document for another user.
     * @deny (get, update, delete) - If the user is not the owner of the document.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      // Allow users to create their own user document.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      // Allow users to get, update, and delete their own user document.
      allow get, update, delete: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
      allow list: if false;
    }

    /**
     * @description Controls access to news articles. Read is public; write is restricted (TODO: admin roles).
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) - Anyone can read news articles.
     * @deny (create, update, delete) - No one can create, update, or delete news articles (TODO: Add admin role check).
     * @principle Public read access with restricted writes (TODO: implement role-based writes).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Controls access to categories.  Read is public; write is restricted (TODO: admin roles).
     * @path /categories/{categoryId}
     * @allow (get, list) - Anyone can read categories.
     * @deny (create, update, delete) - No one can create, update, or delete categories (TODO: Add admin role check).
     * @principle Public read access with restricted writes (TODO: implement role-based writes).
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Controls access to user preferences.
     * @path /user_preferences/{userPreferenceId}
     * @allow (create) - If the user ID in the preference matches the authenticated user ID.
     * @allow (get, update, delete) - If the user is the owner of the preference (userId matches auth.uid).
     * @deny (create) - If the user ID in the preference does not match the authenticated user ID.
     * @deny (get, update, delete) - If the user is not the owner of the preference.
     * @principle Enforces ownership for user preferences.
     */
    match /user_preferences/{userPreferenceId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get, update, delete: if isSignedIn() && isExistingOwnerByUserId(resource.data.userId);
    }

    // ---- Helper functions ----

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the requested user ID matches the authenticated user ID.
    function isOwner(userId) {
      return isSignedIn() && userId == request.auth.uid;
    }

    //Check if the user is signed in and is the owner, also check if resource exists.
    function isExistingOwner(userId) {
        return isSignedIn() && userId == request.auth.uid && resource != null;
    }
       //Check if the user is signed in and is the owner using userId of the resource data, also check if resource exists.
    function isExistingOwnerByUserId(userId) {
        return isSignedIn() && userId == request.auth.uid && resource != null;
    }
  }
}