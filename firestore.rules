/**
 * @file Overview
 * This ruleset enforces a combination of user-based ownership and public read access with restricted write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user data, accessible only to the authenticated user.
 * - /news_articles/{newsArticleId}: Stores public news articles, readable by all, but writable by admins only (not yet implemented).
 * - /categories/{categoryId}: Stores public category data, readable by all, but writable by admins only (not yet implemented).
 * - /user_preferences/{userPreferenceId}: Stores user preferences, accessible only to the user who owns the preference.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - News articles and categories are publicly readable.
 * - User preferences are only accessible to the owning user.
 * - Listing of news articles is public.
 *
 * Denormalization for Authorization:
 *  There is no denormalization in the current rules.  If the write rules for news articles were changed to allow user-generated content,
 *  then the `NewsArticle` entity would need an `authorId` field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own document.
     * @allow (get, list, update, delete) Signed-in user accesses their own document.
     * @deny (create) Signed-in user attempts to create a document with a mismatched user ID.
     * @deny (get, list, update, delete) Signed-in user attempts to access another user's document.
     * @principle Enforces user-based ownership.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) Any user can read news articles.
     * @deny (create, update, delete) No user can create, update, or delete news articles without proper authorization (e.g., admin role - not yet implemented).
     * @principle Allows public read access but restricts write access.
     */
    match /news_articles/{newsArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check once implemented
      allow update: if false; // TODO: Add admin role check once implemented
      allow delete: if false; // TODO: Add admin role check once implemented
    }

    /**
     * @description Controls access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category data.
     * @deny (create, update, delete) No user can create, update, or delete categories without proper authorization (e.g., admin role - not yet implemented).
     * @principle Allows public read access but restricts write access.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check once implemented
      allow update: if false; // TODO: Add admin role check once implemented
      allow delete: if false; // TODO: Add admin role check once implemented
    }

    /**
     * @description Controls access to user preferences.
     * @path /user_preferences/{userPreferenceId}
     * @allow (create) Signed-in user creates their own preference.
     * @allow (get, list, update, delete) Signed-in user accesses their own preference.
     * @deny (create) Signed-in user attempts to create a preference with a mismatched user ID.
     * @deny (get, list, update, delete) Signed-in user attempts to access another user's preference.
     * @principle Enforces user-based ownership for preferences.
     */
    match /user_preferences/{userPreferenceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

      allow get: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id == request.auth.uid;
      allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}