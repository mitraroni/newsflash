/**
 * @fileoverview Firestore Security Rules for the NewsFlash application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, user-centric data model. It enforces strict user-ownership for user-specific data and provides public read access to news articles and categories. Write access to news articles and categories are implicitly restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; accessible only by the authenticated user.
 * - /news_articles/{newsArticleId}: Stores news articles; publicly readable, write access restricted.
 * - /categories/{categoryId}: Stores categories; publicly readable, write access restricted.
 * - /user_preferences/{userPreferenceId}: Stores user preferences; accessible only by the associated user.
 *
 * Key Security Decisions:
 * - Public read access for news articles and categories to facilitate open consumption.
 * - Strict ownership model for user profiles and user preferences.
 * - No support for listing all users or user preferences due to privacy concerns and potential performance issues.
 * - In the absence of defined admin roles, write access to news articles and categories is implicitly denied. This can be expanded later to incorporate role-based access.
 *
 * Denormalization for Authorization:
 *  - User preferences are associated with a specific user using the `userId` field, enabling simple ownership checks.
 *  - News articles do not contain an explicit owner field, implying that write access is managed through other means (e.g., backend functions or admin roles).
 *
 * Structural Segregation:
 *  - Publicly readable data (news articles, categories) is stored in top-level collections.
 *  - Private user data is stored under the `/users/{userId}` path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles, allowing only the authenticated user to read and write their own data.
     * @path /users/{userId}
     * @allow (create, update, get, delete) if the authenticated user's ID matches the 'userId' path parameter.
     *   Example: A user with UID "user123" can create, update, get, and delete the document at /users/user123.
     * @deny (create, update, get, delete) if the authenticated user's ID does not match the 'userId' path parameter.
     *   Example: A user with UID "user456" cannot access the document at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to news articles while restricting write access.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) Public access: any user (signed in or not) can read any news article.
     * @deny (create, update, delete) No user can create, update, or delete a news article through client-side rules.
     * @principle Public read, restricted write access to news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to categories while restricting write access.
     * @path /categories/{categoryId}
     * @allow (get, list) Public access: any user (signed in or not) can read any category.
     * @deny (create, update, delete) No user can create, update, or delete a category through client-side rules.
     * @principle Public read, restricted write access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces access control for user preferences, allowing only the associated user to read and write their own preferences.
     * @path /user_preferences/{userPreferenceId}
     * @allow (create, update, get, delete) if the authenticated user's ID matches the 'userId' field in the document.
     *   Example: A user with UID "user123" can create, update, get, and delete the document at /user_preferences/pref456 if the document contains userId: "user123".
     * @deny (create, update, get, delete) if the authenticated user's ID does not match the 'userId' field in the document.
     *   Example: A user with UID "user456" cannot access the document at /user_preferences/pref456 if the document contains userId: "user123".
     * @principle Enforces document ownership for all operations.
     */
    match /user_preferences/{userPreferenceId} {
      allow get: if request.auth != null && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}