/**
 * @fileoverview Firestore Security Rules for the NewsFlash application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, user-centric data model. It enforces strict user-ownership for user-specific data and provides public read access to news articles and categories. Write access to news articles and categories are implicitly restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; access is restricted to the owning user.
 * - /news_articles/{newsArticleId}: Stores news articles; read access is public, write access is implicitly restricted.
 * - /categories/{categoryId}: Stores news categories; read access is public, write access is implicitly restricted.
 * - /user_preferences/{userPreferenceId}: Stores user preferences; access is restricted to the owning user.
 *
 * Key Security Decisions:
 * - User listing is implicitly disabled by not providing a `list` rule on the `/users` collection.
 * - News articles and categories are publicly readable to simplify data access for all users.
 * - The rules default to a secure posture, explicitly denying any access not specifically granted.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2' can create their own profile.
     * @allow (get, update, delete, list) - User with UID 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2' can access their own profile.
     * @deny (create, get, update, delete, list) - Any other user cannot access this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner of the user document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the request is made by the existing owner of the user document.
      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allow public read access to news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) - Any user can read news articles.
     * @deny (create, update, delete) - No user can create, update, or delete news articles.
     * @principle Provides public read access while restricting write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
    }

    /**
     * @description Allow public read access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read categories.
     * @deny (create, update, delete) - No user can create, update, or delete categories.
     * @principle Provides public read access while restricting write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
    }

    /**
     * @description Secure access to user preferences.
     * @path /user_preferences/{userPreferenceId}
     * @allow (create) - User with UID 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2' can create a preference associated with their ID.
     * @allow (get, update, delete, list) - User with UID 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2' can access a preference associated with their ID.
     * @deny (create, get, update, delete, list) - Any other user cannot access this preference.
     * @principle Enforces document ownership for all operations.
     */
    match /user_preferences/{userPreferenceId} {
      // Helper function to check if the request is made by the owner of the user document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       // Helper function to check if the request is made by the existing owner of the user document.
      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      // Helper function to validate relational integrity on create.
      function isValidUserPreference() {
        return request.resource.data.userId == request.auth.uid;
      }

      allow get: if isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isValidUserPreference();
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}