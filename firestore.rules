/**
 * @fileoverview Firestore Security Rules for NewsFlash application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user data and user preferences,
 * allows public read access to news articles and categories, and restricts write
 * access to news articles and categories.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Only the authenticated user can access their own profile.
 * - /news_articles/{newsArticleId}: Stores news articles. Publicly readable.  Write access is not currently defined.
 * - /categories/{categoryId}: Stores news categories. Publicly readable. Write access is not currently defined.
 * - /user_preferences/{userPreferenceId}: Stores user preferences.  Only the user associated with the 'userId' field can modify their preferences.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - News articles and categories are publicly readable.
 * - Listing of user data is allowed only for the user themselves.
 * - Listing of news articles and categories is allowed for all.
 *
 * Denormalization for Authorization:
 *  - The `UserPreference` entity requires the `userId` to be stored directly on the document. This allows rules to validate ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user data.
     * @path /users/{userId}
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to news articles. Write access is not defined.
     * @path /news_articles/{newsArticleId}
     */
    match /news_articles/{newsArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to categories. Write access is not defined.
     * @path /categories/{categoryId}
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users to read and write their own user preferences.
     * @path /user_preferences/{userPreferenceId}
     */
    match /user_preferences/{userPreferenceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner() {
          return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      allow get: if isSignedIn() && get(/databases/$(database)/documents/users/$(resource.data.userId)).data.userId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }
  }
}