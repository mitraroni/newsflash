/**
 * @fileoverview Firestore Security Rules for NewsFlash application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a balance between open data access for news articles and categories,
 * while strictly enforcing user-ownership for user profiles and preferences.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the authenticated user.
 * - /news_articles/{newsArticleId}: Stores news articles, publicly readable, with write access likely restricted to admin roles.
 * - /categories/{categoryId}: Stores news categories, publicly readable, with write access restricted to admin roles.
 * - /user_preferences/{userPreferenceId}: Stores user preferences, linking users to categories. Only the associated user can modify their preferences.
 *
 * Key Security Decisions:
 * - Public read access for news articles and categories to facilitate open consumption.
 * - Strict user-ownership for user profiles and preferences to protect private data.
 * - No user listing is allowed to prevent enumeration.
 * - The rules are designed to be authorization-independent, avoiding the need for complex `get()` calls.
 *
 * Denormalization for Authorization:
 *  N/A - The existing data structure avoids complex authorization requirements. Future performance optimizations may involve denormalizing roles directly into documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user data, ensuring only the authenticated user can access their profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2' can create their own profile at /users/CAE6XnX3jhh5TUfDmsFU1IUmZJs2.
     * @allow (get, update, delete) - User with UID 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2' can read, update, and delete their own profile at /users/CAE6XnX3jhh5TUfDmsFU1IUmZJs2.
     * @deny (create) - User with UID 'OTHER_USER_ID' cannot create a profile at /users/CAE6XnX3jhh5TUfDmsFU1IUmZJs2.
     * @deny (get, update, delete) - User with UID 'OTHER_USER_ID' cannot read, update, or delete the profile at /users/CAE6XnX3jhh5TUfDmsFU1IUmZJs2.
     * @principle Enforces strict user-ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to news articles while restricting write access.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) - Any user (or no user) can read news articles.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete news articles.
     * @principle Provides open read access while protecting content integrity.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to categories while restricting write access.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read categories.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete categories.
     * @principle Provides open read access while protecting content integrity.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secures user preferences, ensuring only the associated user can modify them.
     * @path /user_preferences/{userPreferenceId}
     * @allow (create) - User with UID 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2' can create a preference if userId matches.
     * @allow (get, update, delete) - User with UID 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2' can read, update, and delete their own preferences based on userId.
     * @deny (create) - User with UID 'OTHER_USER_ID' cannot create a preference for user 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2'.
     * @deny (get, update, delete) - User with UID 'OTHER_USER_ID' cannot read, update, or delete preferences for user 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2'.
     * @principle Enforces user-ownership based on the 'userId' field in the document.
     */
    match /user_preferences/{userPreferenceId} {
      allow get: if isUserPreferenceOwner(resource.data.userId);
      allow list: if false; // Listing user preferences is not permitted.
      allow create: if isUserPreferenceOwner(request.resource.data.userId);
      allow update: if isExistingUserPreferenceOwner(resource.data.userId);
      allow delete: if isExistingUserPreferenceOwner(resource.data.userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isUserPreferenceOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
  }

    function isExistingUserPreferenceOwner(userId) {
    return isUserPreferenceOwner(userId) && resource != null;
  }
}