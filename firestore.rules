/**
 * @fileoverview Firestore Security Rules for NewsFlash application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read/restricted-write access patterns.
 * User data is strictly controlled by the authenticated user, while news articles and categories are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user data, accessible only by the owning user.
 * - /news_articles/{newsArticleId}: Stores news articles, publicly readable, but write-restricted (presumably to admin roles).
 * - /categories/{categoryId}: Stores news categories, publicly readable, but write-restricted (presumably to admin roles).
 * - /user_preferences/{userPreferenceId}: Stores user preferences and is accessible only by the owning user.
 *
 * Key Security Decisions:
 * - User data is isolated to the authenticated user (ownership model).
 * - News articles and categories are publicly readable.
 * - Listing news articles is allowed for all users.
 *
 * Denormalization for Authorization:
 *  N/A - Current rules do not require denormalization.  If write access to /news_articles or /categories is restricted to admin roles, this will be managed outside of these rules.
 *
 * Structural Segregation:
 * Publicly readable data (news articles, categories) and private user data are stored in separate top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user data, ensuring only the authenticated user can access their own data.
     * @path /users/{userId}
     * @allow (create) User with ID 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2' creates their own profile.
     * @deny (get, list, update, delete) User with ID 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2' tries to read another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to news articles, while restricting write access (presumably to admin roles).
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) Any user can read news articles.
     * @deny (create, update, delete) Non-admin user attempts to create, update, or delete a news article.
     * @principle Allows public reads with owner-only writes.
     */
    match /news_articles/{newsArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to categories, while restricting write access (presumably to admin roles).
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read categories.
     * @deny (create, update, delete) Non-admin user attempts to create, update, or delete a category.
     * @principle Allows public reads with owner-only writes.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secures user preferences, ensuring only the authenticated user can access their own preferences.
     * @path /user_preferences/{userPreferenceId}
     * @allow (create) User with ID 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2' creates their own preferences.
     * @deny (get, list, update, delete) User with ID 'CAE6XnX3jhh5TUfDmsFU1IUmZJs2' tries to read another user's preferences.
     * @principle Enforces document ownership for all operations.
     */
    match /user_preferences/{userPreferenceId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.userId == resource.data.userId && resource != null;
      allow delete: if isSignedIn() && resource != null && request.auth.uid == resource.data.userId;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the document, and if the resource exists.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}